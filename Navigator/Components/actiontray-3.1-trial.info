{"Name":"ActionTray","Id":2199,"Alias":"actiontray","Description":"###About ActionTray###\n\n`ActionTray` is a dockable, customizable, slide-out, tray view controller for iOS and Android that can be attached to the top, left, bottom or right sides of the screen. `ActionTray` supports three tray types:\n\n- *Draggable* - The user can drag the tray out from the edged anywhere between its open and closed positions or double tap it to snap between open and closed.\n- *Popup* - The tray will snap between its open and closed positions when its **Drag Tab** is touched\n- *AutoClosingPopup* - Just like the **Popup** tray but it will also close if the user taps its content area \n\n###Use Alone or in Groups###\n\nYou can place individual `ActionTray`s along any edge of the screen or place several `ActionTray`s togehter and attach them to an `ActionTrayManager` to control them as a group and use them like palettes or menus. The `ActionTrayManager` provides events to respond to user interaction in any of the trays it controls and it automatically ensures that only one tray in the group is open at a time.\n\n###Events###\n\n`ActionTray` defines the following events that you can monitor and respond to:\n\n- Touched\n- Moved\n- Released\n- Opened\n- Closed\n\n###Appearance###\n\n`ActionTray` is fully customizable with user definable appearances for every element of its UI. `ActionTray` supports the following **Drag Tab** types:\n\n- *Plain* - An empty **Drag Tab**\n- *GripOnly* - A 3 line grip in the **Drag Tab**\n- *GripAndText* - A 3 line grip and a title in the **Drag Tab**\n- *TitleOnly* - Only the title in the **Drag Tab**\n- *IconOnly* - Only an icon in the **Drag Tab**\n- *IconAndTitle* - An icon and title in the **Drag Tab**\n- *CustomDrawn* - Allows for a totally custom drawn **Drag Tab**\n\nYou can also position where the **Drag Tab** appears on the `ActionTray` as one of the following:\n\n- *TopOrLeft* - Appears on the top or left side of the `ActionTray` based on its orientation\n- *Middle* - Appears in the middle of the `ActionTray`\n- *BottomOrRight* - Appears on the bottom or right side of the `ActionTray` based on its orientation\n- *Custom* - You can control the position of the **Drag Tab** by setting the *tabOffset* property of the `ActionTray`\n\n###iOS 8 Ready###\n\n`ActionTray` now supports the iOS 7 look and feel by calling the **Flatten** method of the `ActionTray\u0027s` _appearance_ property. On iOS 7 and greater devices, the look will be switched automatically.\n\n###Features###\n\n`ActionTray` includes a fully documented **API** with comments for every feature. The `ActionTray` user interface is drawn with vectors and is fully resolution indenpendant.\n\n###iOS Example###\n\n`ActionTray` was designed to make adding it to a project super easy. Start an iPad, iPhone or Universal project in Xamarin Studio and build the project. Next, double click the _MyProjectViewController.xib_ file to open it in Xcode. Insert a _UIView_ and place it along one of the edges of the main _UIView_ making it a large as it will be when fully opened by the user. Next change its _Class_ to _UIActionTray_ and add any other views or components that will be part of the tray.\n\n\n```\nusing Appracatappra.ActionComponents.ActionTray;\n...\n\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n\t...\n\t\n\t// Wireup the left side tray created in the .xib file and style\n\t// it to be a drag out tray.\n\tif (leftTray != null) {\n\t\t// Set tray type\n\t\tleftTray.orientation = UIActionTrayOrientation.Left;\n\t\tleftTray.tabLocation=UIActionTrayTabLocation.BottomOrRight;\n\t\tleftTray.frameType=UIActionTrayFrameType.EdgeOnly;\n\t\tleftTray.tabType=UIActionTrayTabType.IconAndTitle;\n\n\t\t// Style tray\n\t\tleftTray.appearance.background=UIColor.LightGray;\n\t\tleftTray.appearance.frame=UIColor.DarkGray;\n\t\tleftTray.icon=UIImage.FromFile (\"Images/icon_calendar.png\");\n\t\tleftTray.title=\"Events\";\n\t\tleftTray.appearance.tabAlpha=0.25f;\n\t\tleftTray.CloseTray (false);\n\n\t\t// Respond to the tray being touched\n\t\tleftTray.Touched+= (tray) =\u003e {\n\t\t\t// Are we on an iPhone?\n\t\t\tif (UserInterfaceIdiomIsPhone) {\n\t\t\t\t//Yes, close this tray and animate the closing\n\t\t\t\trightTray.CloseTray (true);\n\t\t\t}\n\n\t\t\t// Tell any open palette trays to close\n\t\t\ttrayManager.CloseAllTrays ();\n\n\t\t\t// Close document tray\n\t\t\tif (documentTray!=null) \n\t\t\t\tdocumentTray.CloseTray (true);\n\t\t};\n\t}\n\n\t// Wireup the right tray created in the .xib file and style it\n\t// to be a popup tray. Touch it\u0027s dragTab to open and close it.\n\tif (rightTray != null) {\n\t\t// Are we on an iPhone?\n\t\tif (UserInterfaceIdiomIsPhone) {\n\t\t\t// Move the subview into view and attach it to the master view\n\t\t\trightTray.MoveTo (new PointF(320f-rightTray.Frame.Width,0f));\n\t\t\tView.AddSubview(rightTray);\n\n\t\t\t// iPhone specific settings\n\t\t\trightTray.tabLocation=UIActionTrayTabLocation.BottomOrRight;\n\t\t}\n\n\t\t// Set tray type\n\t\trightTray.trayType=UIActionTrayType.Popup;\n\t\trightTray.orientation=UIActionTrayOrientation.Right;\n\t\trightTray.bringToFrontOnTouch=true;\n\t\tif (UserInterfaceIdiomIsPhone) rightTray.CloseTray(false);\n\n\t\t// Style the tray\n\t\trightTray.appearance.background=UIColor.DarkGray;\n\n\t\t// Respond to the tray being opened\n\t\trightTray.Opened+= (tray) =\u003e {\n\t\t\t//Are we on an iPhone?\n\t\t\tif (UserInterfaceIdiomIsPhone) {\n\t\t\t\t//Yes, close this tray and animate the closing\n\t\t\t\tleftTray.CloseTray (true);\n\t\t\t}\n\n\t\t\t// Tell any open palette trays to close\n\t\t\ttrayManager.CloseAllTrays ();\n\n\t\t\t// Close document tray\n\t\t\tif (documentTray!=null) \n\t\t\t\tdocumentTray.CloseTray (true);\n\t\t};\n\t}\n\n\t...\n\n}\n```\n\n_NOTE: `ActionTray`s and the UIViews that they control can be completely created in C# code without using .xib or storyboard files._\n\n###Android Example###\n\n`ActionTray` was designed to make adding it to a project super easy. Start an Android project in Xamarin Studio, switch to the Android Designer and add a RelativeLayout to be the parent of the `ActionTab`. Add one or more _Views_, switch to the Source view and change their type to _Appracatappra.ActionComponents.ActionTray.UIActionTray_. Wire-up their functionality inside your Main Activity:\n\n```\nusing Appracatappra.ActionComponents.ActionTray;\n...\n\n[Activity (Label = \"ActionTrayTest.Android\", MainLauncher = true)]\npublic class Activity1 : Activity\n{\n\t#region Private Variables\n\tprivate UIActionTray leftTray, rightTray, toolsTray, propertyTray, paletteTray, documentTray;\n\t#endregion \n\n\t#region Public Variables\n\tpublic UIActionTrayManager trayManager;\n\t#endregion\n\n\t#region Override Methods\n\tprotected override void OnCreate (Bundle bundle)\n\t{\n\t\tbase.OnCreate (bundle);\n\n\t\t// Set our view from the \"main\" layout resource\n\t\tSetContentView (Resource.Layout.Main);\n\n\t\t// Gain Access to all views and controls in our layout\n\t\tleftTray = FindViewById\u003cUIActionTray\u003e (Resource.Id.trayLeft);\n\t\trightTray = FindViewById\u003cUIActionTray\u003e (Resource.Id.trayRight);\n\t\ttoolsTray = FindViewById\u003cUIActionTray\u003e (Resource.Id.trayTools);\n\t\tpropertyTray = FindViewById\u003cUIActionTray\u003e (Resource.Id.trayProperty);\n\t\tpaletteTray = FindViewById\u003cUIActionTray\u003e (Resource.Id.trayPalette);\n\t\tdocumentTray = FindViewById\u003cUIActionTray\u003e (Resource.Id.trayDocuments);\n\n\t\t// Create a TrayManager to handle a collection of \"palette\"\n\t\t// trays. It will automatically close any open tray when \n\t\t// another tray in this collection is opened.\n\t\ttrayManager = new UIActionTrayManager ();\n\n\t\t// Automatically close the left and right trays when any tray\n\t\t// in the manager\u0027s collection is opened\n\t\ttrayManager.TrayOpened += (tray) =\u003e {\n\t\t\t// Animate the trays being closed\n\t\t\tleftTray.CloseTray (true);\n\t\t\trightTray.CloseTray (true);\n\t\t};\n\n\t\t// Setup the left side tray\n\t\tleftTray.trayType = UIActionTrayType.Draggable;\n\t\tleftTray.orientation = UIActionTrayOrientation.Left;\n\t\tleftTray.tabLocation = UIActionTrayTabLocation.BottomOrRight;\n\t\tleftTray.frameType = UIActionTrayFrameType.EdgeOnly;\n\t\tleftTray.tabType = UIActionTrayTabType.IconAndTitle;\n\t\tleftTray.bringToFrontOnTouch=true;\n\n\t\t// Style tray\n\t\tleftTray.appearance.background = Color.Gray;\n\t\tleftTray.appearance.border = Color.Red;\n\t\tleftTray.icon = Resource.Drawable.icon_calendar;\n\t\tleftTray.title = \"Events\";\n\t\tleftTray.appearance.tabAlpha=100;\n\t\tleftTray.CloseTray (false);\n\n\t\t// Respond to the left tray being touched\n\t\tleftTray.Touched+= (tray) =\u003e {\n\t\t\t//Yes, close this tray and animate the closing\n\t\t\trightTray.CloseTray (true);\n\t\t\t\n\t\t\t// Tell any open palette trays to close\n\t\t\ttrayManager.CloseAllTrays ();\n\t\t\t\n\t\t\t// Close document tray\n\t\t\tdocumentTray.CloseTray (true);\n\t\t};\n\n\t\t// Setup the right side tray\n\t\trightTray.trayType = UIActionTrayType.Popup;\n\t\trightTray.orientation = UIActionTrayOrientation.Right;\n\t\trightTray.bringToFrontOnTouch = true;\n\t\trightTray.CloseTray (false);\n\n\t\t// Respond to the tray being opened\n\t\trightTray.Opened+= (tray) =\u003e {\n\t\t\t//Close this tray and animate the closing\n\t\t\tleftTray.CloseTray (true);\n\t\t\t\n\t\t\t// Tell any open palette trays to close\n\t\t\ttrayManager.CloseAllTrays ();\n\t\t\t\n\t\t\t// Close document tray\n\t\t\tdocumentTray.CloseTray (true);\n\t\t};\n\n\t\t// Set tray type\n\t\tdocumentTray.trayType = UIActionTrayType.AutoClosingPopup;\n\t\tdocumentTray.orientation = UIActionTrayOrientation.Bottom;\n\t\tdocumentTray.tabType = UIActionTrayTabType.GripAndTitle;\n\t\tdocumentTray.bringToFrontOnTouch=true;\n\t\t\n\t\t// Style tray\n\t\tdocumentTray.tabWidth = 125;\n\t\tdocumentTray.appearance.background = Color.Gray;\n\t\tdocumentTray.title = \"Documents\";\n\t\tdocumentTray.CloseTray (false);\n\t\t\n\t\t// Respond to the tray being opened\n\t\tdocumentTray.Opened += (tray) =\u003e {\n\t\t\t// Close left and right trays\n\t\t\tleftTray.CloseTray(true);\n\t\t\trightTray.CloseTray(true);\n\t\t};\n\n\t\t//--------------------------------------------------------------------------------------\n\t\t// Create three action tray\u0027s and use them as a collection via an ActionTrayManager\n\t\t//--------------------------------------------------------------------------------------\n\n\t\t//--------------------------------------------------------------------------------------\n\t\t// Palette 1\n\t\t// Set tray type\n\t\tpaletteTray.trayType = UIActionTrayType.AutoClosingPopup;\n\t\tpaletteTray.orientation = UIActionTrayOrientation.Top;\n\t\tpaletteTray.tabLocation = UIActionTrayTabLocation.TopOrLeft;\n\t\tpaletteTray.tabType = UIActionTrayTabType.IconAndTitle;\n\t\tpaletteTray.CloseTray (false);\n\t\t\n\t\t// Style tray\n\t\tpaletteTray.tabWidth = 125;\n\t\tpaletteTray.appearance.background = Color.Gray;\n\t\tpaletteTray.icon = Resource.Drawable.icon_palette;\n\t\tpaletteTray.title=\"Palette\";\n\t\t\n\t\t// Add this tray to the manager\u0027s collection\n\t\ttrayManager.AddTray (paletteTray);\n\n\t\t//--------------------------------------------------------------------------------------\n\t\t// Palette 2\n\t\t// Setup property tray type\n\t\tpropertyTray.trayType = UIActionTrayType.Popup;\n\t\tpropertyTray.orientation = UIActionTrayOrientation.Top;\n\t\tpropertyTray.tabLocation = UIActionTrayTabLocation.TopOrLeft;\n\t\tpropertyTray.tabType = UIActionTrayTabType.IconAndTitle;\n\t\tpropertyTray.CloseTray (false);\n\t\t\n\t\t// Style tray\n\t\tpropertyTray.tabWidth = 125;\n\t\tpropertyTray.appearance.background = Color.Rgb (38,38,38);\n\t\tpropertyTray.icon=Resource.Drawable.icon_measures;\n\t\tpropertyTray.title=\"Properties\";\n\t\t\n\t\t// Add this tray to the manager\u0027s collection\n\t\ttrayManager.AddTray (propertyTray);\n\n\t\t//--------------------------------------------------------------------------------------\n\t\t// Palette 3\n\t\t// Setup tools tray type\n\t\ttoolsTray.trayType = UIActionTrayType.AutoClosingPopup;\n\t\ttoolsTray.orientation = UIActionTrayOrientation.Top;\n\t\ttoolsTray.tabType = UIActionTrayTabType.IconOnly;\n\t\ttoolsTray.CloseTray (false);\n\t\t\n\t\t// Style tools tray\n\t\ttoolsTray.tabWidth = 50;\n\t\ttoolsTray.tabLocation = UIActionTrayTabLocation.BottomOrRight;\n\t\ttoolsTray.appearance.background = Color.Rgb (38,38,38);\n\t\ttoolsTray.icon = Resource.Drawable.icon_pencil;\n\t\t\n\t\t// Add this tray to the manager\u0027s collection\n\t\ttrayManager.AddTray (toolsTray);\n\t}\n\n\tprotected override void OnSaveInstanceState (Bundle outState)\n\t{\n\t\t//Save the state of all trays on the screen\n\t\toutState.PutString(\"leftTray\",leftTray.SaveState);\n\t\toutState.PutString(\"rightTray\",rightTray.SaveState);\n\t\toutState.PutString(\"documentTray\",documentTray.SaveState);\n\t\toutState.PutString(\"paletteTray\",paletteTray.SaveState);\n\t\toutState.PutString(\"propertyTray\",propertyTray.SaveState);\n\t\toutState.PutString(\"toolsTray\",toolsTray.SaveState);\n\t\t\n\t\tbase.OnSaveInstanceState (outState);\n\t}\n\n\tprotected override void OnRestoreInstanceState (Bundle savedInstanceState)\n\t{\n\t\t//Restore all trays to their previous states\n\t\tleftTray.RestoreState(savedInstanceState.GetString(\"leftTray\"));\n\t\trightTray.RestoreState(savedInstanceState.GetString(\"rightTray\"));\n\t\tdocumentTray.RestoreState(savedInstanceState.GetString(\"documentTray\"));\n\t\tpaletteTray.RestoreState(savedInstanceState.GetString(\"paletteTray\"));\n\t\tpropertyTray.RestoreState(savedInstanceState.GetString(\"propertyTray\"));\n\t\ttoolsTray.RestoreState(savedInstanceState.GetString(\"toolsTray\"));\n\n\t\tbase.OnRestoreInstanceState (savedInstanceState);\n\t}\n\t#endregion \n}\n```\n\n###Known Issues###\n\nThere is a know issue with the _dragTab_ hit target size and some Android based phones that can make an `ActionTray` hard to open on these devices. This issue will be addressed in a future release and the ability to programmatically increase the _height_ of the _dragTab_ will be added. While `ActionTray` now supports Android Ice Cream Sandwich (API Level 15), it performs better on Android Jelly Bean (API Level 17).\n\n\n##Trial Version##\n\nThe Trial version of `ActionTray` is fully functional however the background is watermarked. The fully licensed version removes this watermark.\n\n_Screenshots created with [PlaceIt](http://placeit.breezi.com \"PlaceIt by Breezi\") and may contain simulated functionality not included in the ActionTray._\n","Version":"3.1","Summary":"A dockable, customizable, slide-out, tray view controller for iOS and Android","QuickStart":"##ActionTray Component##\n\n###Getting Started with ActionTrays###\n\nTo use an `ActionTray` in your mobile application include the `ActionPack.iOS` or `ActionPack.Android` component and reference the following using statement in your C# code:\n\n```\nusing Appracatappra.ActionComponents.ActionTray;\n``` \n\n###Minimal Setup Required###\n\nWhether created as a .xib file in Xcode for iOS or the designer for Android or built directly from C# code the following two properties **must** be set before the `ActionTray` is displayed:\n\n```\n// These values MUST be set in code before the view is displayed\ntray.trayType = UIActionTrayType.Popup;\ntray.orientation = UIActionTrayOrientation.Right;\n```\n\nFailure to set the above lines before display can result in an `ActionTray` that is drawn and/or behaves incorrectly.\n\nIf the tray is being created completely in C# code, set the above lines **after** you have set the tray\u0027s _Frame_ size and added the tray to the parent _View_ so that it can correctly calculate its open and closed positions.\n\n###Working with ActionTrays in Android###\n\n`ActionTray` was designed to make adding it to a project super easy. Start an Android project in Xamarin Studio, switch to the **Android Designer** and add a **RelativeLayout** to be the parent of the `ActionTray`. Add one or more _Views_, switch to the **Source** view and change their type to _Appracatappra.ActionComponents.ActionTray.UIActionTray_.\n\n_Note: The `ActionTray` **MUST** be hosted inside a **RelativeView** or it will not work correctly! The `ActionTray` itself is a type of **RelativeLayout** so add any UI Components to the tray and position them within it using **RelativeLayout** metrics._\n\n###Configuring an ActionTray###\n\nAside from the base, minimal setup above, there are several features that you can use to customize not only the look but the feel of your action trays. Here is an example in iOS for an `ActionTray` added to a .xib file:\n\n```\n// Set tray type\nleftTray.orientation = UIActionTrayOrientation.Left;\nleftTray.tabLocation=UIActionTrayTabLocation.BottomOrRight;\nleftTray.frameType=UIActionTrayFrameType.EdgeOnly;\nleftTray.tabType=UIActionTrayTabType.IconAndTitle;\n\n// Style tray\nleftTray.appearance.background=UIColor.LightGray;\nleftTray.appearance.frame=UIColor.DarkGray;\nleftTray.icon=UIActionImage.FromFile (\"Images/icon_calendar.png\");\nleftTray.title=\"Events\";\nleftTray.CloseTray (false);\n```\n\nAnd the same code for Android for an `ActionTray` created in the designer:\n\n```\n// Gain Access to all views and controls in our layout\nUIActionTray leftTray = FindViewById\u003cUIActionTray\u003e (Resource.Id.trayLeft);\n...\n\n// Setup the left side tray\nleftTray.trayType = UIActionTrayType.Draggable;\nleftTray.orientation = UIActionTrayOrientation.Left;\nleftTray.tabLocation = UIActionTrayTabLocation.BottomOrRight;\nleftTray.frameType = UIActionTrayFrameType.EdgeOnly;\nleftTray.tabType = UIActionTrayTabType.IconAndTitle;\n\n// Style tray\nleftTray.appearance.background = Color.Gray;\nleftTray.appearance.border = Color.Red;\nleftTray.icon = Resource.Drawable.icon_calendar;\nleftTray.title = \"Events\";\nleftTray.appearance.tabAlpha=100;\nleftTray.CloseTray (false);\n```\n\n###Responding to User Interaction###\n\n`ActionTrays` define several events that can be responded to such as _Touched_, _Moved_, _Released_, _Opened_, _Closed_ or _CustomDrawDragTab_. The following is an example of handling an `ActionTray` being opened on either iOS or Android:\n\n```\n// Respond to the tray being opened\nrightTray.Opened+= (tray) =\u003e {\n\t// Tell any open palette trays to close\n\ttrayManager.CloseAllTrays ();\n};\n```\n\n###Working with Groups of ActionTrays###\n\n`ActionTray` provides a **UIActionTrayManager** to make working with groups of `ActionTrays` easier. The **UIActionTrayManager** ensures that only one tray in the group is open at any given time and provides events for handling the trays it controls as a group. The following is an example of building a **UIActionTrayManager** and responding to any tray being opened in the group for both iOS and Android:\n\n```\n// Create a TrayManager to handle a collection of \"palette\"\n// trays. It will automatically close any open tray when \n// another tray in this collection is opened.\ntrayManager = new UIActionTrayManager ();\n\n// Automatically close the left tray when any tray\n// in the manager\u0027s collection is opened\ntrayManager.TrayOpened += (tray) =\u003e {\n\t// Animate the tray being closed\n\tleftTray.CloseTray (true);\n};\n```\n\nConfigure your `ActionTrays` as normal and use the following code to add them to the Tray Managers collection. The tray will be automatically close by the manager when added:\n\n```\n// Add this tray to the manager\u0027s collection\ntrayManager.AddTray (paletteTray);\n```\n\n###Custom Drawing the DragTab###\n\n`ActionTrays` provide several types of built in _dragTabs_ and many properties for controlling their appearance. Sometimes, however, that isn\u0027t enough. That\u0027s why `ActionTrays` allow you to custom draw the _dragTab_ by hand. Here is an example in iOS:\n\n```\n// Set tray type\ntoolsTray.trayType=UIActionTrayType.AutoClosingPopup;\ntoolsTray.tabType=UIActionTrayTabType.IconOnly;\ntoolsTray.tabType=UIActionTrayTabType.CustomDrawn;\ntoolsTray.CloseTray (false);\n\t\t\n// Style tray\ntoolsTray.tabWidth=50f;\ntoolsTray.appearance.background=UIColor.FromRGB (38,38,38);\n\n// Custom draw the tray\u0027s drag tab\ntoolsTray.CustomDrawDragTab+= (tray, rect) =\u003e {\n\t// Mix background color\n\tUIColor tabColor;\n\t\t\t\n\tif (tray.frameType==UIActionTrayFrameType.None) {\n\t\ttabColor=tray.appearance.background.ColorWithAlpha (tray.appearance.tabAlpha);\n\t} else {\n\t\ttabColor=tray.appearance.frame.ColorWithAlpha (tray.appearance.tabAlpha);\n\t}\n\n\t// Save current context\n\tvar context = UIGraphics.GetCurrentContext();\n\n\t// Draw tab in the given bounds\n\tvar bodyPath = UIBezierPath.FromRect(rect);\n\ttabColor.SetFill();\n\tbodyPath.Fill();\n\n\t// Draw icon\n\tvar icon=UIImage.FromFile (\"Images/icon_pencil.png\");\n\tvar y=rect.GetMinY()+5f;\n\tvar tabIconRect = new RectangleF(rect.GetMinX() + 1, y, 30, 30);\n\tvar tabIconPath = UIBezierPath.FromRect(tabIconRect);\n\tcontext.SaveState();\n\ttabIconPath.AddClip();\n\ticon.Draw(new RectangleF((float)Math.Floor(tabIconRect.GetMinX() + 1f), (float)Math.Floor(y + 0.5f), icon.Size.Width, icon.Size.Height),CGBlendMode.Normal,tray.appearance.tabAlpha);\n\tcontext.RestoreState();\n};\n```\n\nHere is the same example in Android:\n\n```\n// Setup tools tray type\ntoolsTray.trayType = UIActionTrayType.AutoClosingPopup;\ntoolsTray.orientation = UIActionTrayOrientation.Top;\ntoolsTray.tabType = UIActionTrayTabType.IconOnly;\ntoolsTray.CloseTray (false);\n\t\t\n// Style tools tray\ntoolsTray.tabWidth = 50;\ntoolsTray.tabLocation = UIActionTrayTabLocation.BottomOrRight;\ntoolsTray.appearance.background = Color.Rgb (38,38,38);\ntoolsTray.tabType = UIActionTrayTabType.CustomDrawn;\ntoolsTray.icon = Resource.Drawable.icon_pencil;\n\n// Custom draw this tab\ntoolsTray.CustomDrawDragTab += (tray, canvas, rect) =\u003e {\n\t//Draw background\n\tvar body= new ShapeDrawable(new RectShape());\n\tbody.Paint.Color=tray.appearance.background;\n\tbody.SetBounds (rect.Left, rect.Top, rect.Right, rect.Bottom);\n\tbody.Draw (canvas);\n\n\t//Define icon paint\n\tvar iPaint=new Paint();\n\tiPaint.Alpha=tray.appearance.tabAlpha;\n\n\t//Load bitmap\n\tvar bitmap=BitmapFactory.DecodeResource(Resources,tray.icon);\n\t\t\t\n\t//Draw image\n\tcanvas.DrawBitmap (bitmap, rect.Left+1, rect.Top+5, iPaint);\n};\n```\n\n###Maintain State on Android###\n\nSince views are destroyed and recreated on Android devices for events such as screen rotation, `ActionTrays` provide methods for saving and restoring their state. Here is an example:\n\n```\nprotected override void OnSaveInstanceState (Bundle outState)\n{\n\t//Save the state of all trays on the screen\n\toutState.PutString(\"leftTray\",leftTray.SaveState);\n\toutState.PutString(\"rightTray\",rightTray.SaveState);\n\toutState.PutString(\"documentTray\",documentTray.SaveState);\n\toutState.PutString(\"paletteTray\",paletteTray.SaveState);\n\toutState.PutString(\"propertyTray\",propertyTray.SaveState);\n\toutState.PutString(\"toolsTray\",toolsTray.SaveState);\n\t\t\n\tbase.OnSaveInstanceState (outState);\n}\n\nprotected override void OnRestoreInstanceState (Bundle savedInstanceState)\n{\n\t//Restore all trays to their previous states\n\tleftTray.RestoreState(savedInstanceState.GetString(\"leftTray\"));\n\trightTray.RestoreState(savedInstanceState.GetString(\"rightTray\"));\n\tdocumentTray.RestoreState(savedInstanceState.GetString(\"documentTray\"));\n\tpaletteTray.RestoreState(savedInstanceState.GetString(\"paletteTray\"));\n\tpropertyTray.RestoreState(savedInstanceState.GetString(\"propertyTray\"));\n\ttoolsTray.RestoreState(savedInstanceState.GetString(\"toolsTray\"));\n\n\tbase.OnRestoreInstanceState (savedInstanceState);\n}\n```\n\n##Examples##\n\nFor full examples of using `ActionTrays` in your mobile application please see the _APTest.iOS_ example app included with this component. `ActionTrays` are used throughout the app.\n\nThe _APTest.iOS_ app not only includes this documentation but it also includes the full API documentation for the entire `ActionPack` component suite.\n\nSee the API documentation for `ActionTray` for a complete list of features and their usage.\n\n\n##Trial Version##\n\nThe Trial version of `ActionTray` is fully functional however the background is watermarked. The fully licensed version removes this watermark.\n\n## Other Resources\n\n* [Action Components](http://appracatappra.com/actioncomponents)\n* [Android API Documentation](http://appracatappra.com/api/android/)\n* [iOS API Documentation](http://appracatappra.com/api/ios/)\n* [Appracatappra Support Forum](http://appracatappra.com/forum/index.php)\n* [Support](http://appracatappra.com/apis/component-support)","Hash":"66834ace44d16174cdc785dfd559c299","TargetPlatforms":["ios","android"],"TrialHash":"2d0d16dd9a29b159496d434bec7d49cf"}